// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cards "github.com/PakSerVal/bear-masha/internal/domain/cards"

	mock "github.com/stretchr/testify/mock"
)

// CardRepository is an autogenerated mock type for the CardRepository type
type CardRepository struct {
	mock.Mock
}

type CardRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CardRepository) EXPECT() *CardRepository_Expecter {
	return &CardRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, card
func (_m *CardRepository) Create(ctx context.Context, card cards.Card) (*cards.Card, error) {
	ret := _m.Called(ctx, card)

	var r0 *cards.Card
	if rf, ok := ret.Get(0).(func(context.Context, cards.Card) *cards.Card); ok {
		r0 = rf(ctx, card)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cards.Card)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cards.Card) error); ok {
		r1 = rf(ctx, card)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CardRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - card cards.Card
func (_e *CardRepository_Expecter) Create(ctx interface{}, card interface{}) *CardRepository_Create_Call {
	return &CardRepository_Create_Call{Call: _e.mock.On("Create", ctx, card)}
}

func (_c *CardRepository_Create_Call) Run(run func(ctx context.Context, card cards.Card)) *CardRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cards.Card))
	})
	return _c
}

func (_c *CardRepository_Create_Call) Return(_a0 *cards.Card, _a1 error) *CardRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewCardRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCardRepository creates a new instance of CardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCardRepository(t mockConstructorTestingTNewCardRepository) *CardRepository {
	mock := &CardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
